#!/bin/bash

set -e

# define colors
safe_tput() { [[ -t 1 ]] && tput "$@" || echo ""; }
BOLD=$(safe_tput bold)
RED=$(safe_tput setaf 1)
YELLOW=$(safe_tput setaf 3)
GREEN=$(safe_tput setaf 2)
RESET=$(safe_tput sgr0)

print_help() {
  echo "${BOLD}OVERVIEW:${RESET}" Beautify the output of SwiftFormat.
  echo ""
  echo "${BOLD}USAGE:${RESET}" "swiftformat 2>&1 | $0"
  echo ""
  echo "${BOLD}NOTE:${RESET}" "2>&1 is important to redirect stderr to stdout."
}

while [[ "$#" -gt 0 ]]; do
  case $1 in
  --help | -h)
    print_help
    exit 0
    ;;
  *)
    echo "ðŸ›‘ Error: Unrecognized option '$1'"
    echo ""
    print_help
    exit 1
    ;;
  esac
done

# =========--------- Main ---------=========

SUPPORT_COLOR=0
if [[ -t 1 ]]; then
  SUPPORT_COLOR=1
fi

# On GitHub Actions, GITHUB_ACTIONS is set to "true"
# GITHUB_ACTIONS=true

IS_GITHUB_ACTIONS=0
GITHUB_ACTIONS_ANNOTATION_PREFIX=""
if [[ -n "$GITHUB_ACTIONS" ]]; then
  GITHUB_ACTIONS_ANNOTATION_PREFIX="::"
  IS_GITHUB_ACTIONS=1
fi

awk -v SUPPORT_COLOR=$SUPPORT_COLOR -v IS_GITHUB_ACTIONS="$IS_GITHUB_ACTIONS" -v ANNOTATION_PREFIX="$GITHUB_ACTIONS_ANNOTATION_PREFIX" -v RED="$RED" -v GREEN="$GREEN" -v YELLOW="$YELLOW" -v RESET="$RESET" \
'
{
  # strips "Source input did not lint check." line
  if ($0 ~ /^Source input did not .+$/) {
    next
  }
  # colorize the summary line
  # 1/120 files require formatting.
  # print in green if no files require formatting, otherwise, red
  else if ($0 ~ /^[0-9]+\/[0-9]+ files require formatting\.$/) {
    if (IS_GITHUB_ACTIONS == 1) {
      if ($1 ~ /^0\//) {
        # no files require formatting
        print ANNOTATION_PREFIX "notice::" $0
      } else {
        print ANNOTATION_PREFIX "error::" $0
      }
    } else if (SUPPORT_COLOR == 1) {
      if ($1 ~ /^0\//) {
        print GREEN $0 RESET
      } else {
        print RED $0 RESET
      }
    } else {
      print $0
    }
  }
  # for "0/120 files formatted."
  else if ($0 ~ /^[0-9]+\/[0-9]+ files formatted\.$/) {
    if (IS_GITHUB_ACTIONS == 1) {
      print ANNOTATION_PREFIX "notice::" $0
    } else {
      print $0
    }
  }
  else {
    count = split($0, array, ":")
    if (count > 4) {
      file = array[1]
      line = array[2]
      col = array[3]
      message = substr($0, index($0, array[4]))
      gsub(/^[[:space:]]+|[[:space:]]+$/, "", message) # trim leading and trailing spaces

      if (IS_GITHUB_ACTIONS == 1) {
        if (message ~ /^error/) {
          print ANNOTATION_PREFIX "error file=" file ",line=" line ",col=" col "::" message
        } else if (message ~ /^warning/) {
          print ANNOTATION_PREFIX "warning file=" file ",line=" line ",col=" col "::" message
        } else {
          print ANNOTATION_PREFIX "notice file=" file ",line=" line ",col=" col "::" message
        }
      } else {
        # For linting file issues
        if (SUPPORT_COLOR == 1) {
          printf RESET file ":" line ":" col RESET
        } else {
          printf file ":" line ":" col
        }

        # colorize the message
        if (message ~ /^error/) {
          if (SUPPORT_COLOR == 1) {
            printf RED
          }
        } else if (message ~ /^warning/) {
          if (SUPPORT_COLOR == 1) {
            printf YELLOW
          }
        }

        # print the message
        for (i = 4; i <= count; i++) {
          if (i < count) {
            printf array[i] ":"
          } else {
            printf array[i]
          }
        }

        # reset the color
        if (SUPPORT_COLOR == 1) {
          print RESET
        }
      }
    } else {
      # for other lines
      print $0
    }
  }
}
'

# =========--------- End ---------=========

# References:
#
# - bash colors
#   - https://misc.flogisoft.com/bash/tip_colors_and_formatting
# - awk examples:
#   - https://www.tutorialspoint.com/awk/awk_basic_examples.htm
# - awk substring:
#   - https://unix.stackexchange.com/questions/107090/substring-only-the-first-column-in-awk
# - awk split string:
#   - https://stackoverflow.com/a/36211699/3164091
# - awk for statement
#   - https://www.gnu.org/software/gawk/manual/html_node/For-Statement.html
# - awk pass variable to awk:
#   - https://www.oreilly.com/library/view/linux-shell-scripting/9781785881985/26fde793-9686-43a3-bdec-aba5ffdc4038.xhtml
